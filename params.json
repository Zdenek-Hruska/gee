{"name":"Gee","tagline":"Gee is a modified version of Oliver Lloyd's JMeter-EC2 project.","body":"# Gee / JMeter EC2 script\r\n-----------------------------\r\n\r\nGee is a project based on the Oliver Lloyd's [jmeter-ec2](https://github.com/oliverlloyd/jmeter-ec2) script.\r\nI've added few extensions and modifitcations, like:\r\n* generate reports automatically using [JMeterPluginsCMD](http://jmeter-plugins.org/wiki/JMeterPluginsCMD/)\r\n* generate reports manually from zipped result files using JMeterPluginsCMD\r\n* starting PerfMon server agent on load generatign nodes\r\n* simple integration with [Jenkins CI](http://jenkins-ci.org/)\r\n* threshold check script that can verify test run results and mark Jenkins build as failed or unstable\r\n* exctracting faulty URLs from JMeter CSV result files\r\n* custom config files that are not commited to the repo\r\n\r\nIf all pre-requisits are met, script will automatically download all required\r\ntools and plugins.\r\n\r\n\r\n## Prerequisites\r\n1. java 6+ with `JAVA\\_HOME` sys variable set required to locally generate graphs\r\n2. CLI tools: scp, wget, zip/bzip2, unzip, grep, awk \r\n3. an EC2 account, a key pair pem file and AWS Access Key ID & Secret Access Key\r\n4. Python 2.6+ to run two scripts: genAggregateRepsTimesPercentilesReports.py & extractFaultyUrls.py\r\n\r\n\r\n## Obtaining AWS Access Key ID & Secret Access Key\r\nTo get your :\r\n* Key Pair pem file (it's a private key) go [here](https://console.aws.amazon.com/ec2/home?region=us-east-1#s=KeyPairs)\r\n* Access Key ID & Secret Access Key go to the [Security Credentials](https://portal.aws.amazon.com/gp/aws/securityCredentials) page\r\n\r\nThen:\r\n* Save the pem file in the ./ec2 folder\r\n* Change the pem file properties to 400. (`chmod 400 ./ec2/thisipemfile.pem`)\r\n* Create a copy of the 'secrets.properties' file and prepend your user name to its name. (\\*)\r\n* Add your Access Key ID and Access Secret Key to that file\r\n\r\n(\\*) i.e.: if your user name is 'jk', then file should be named: jk\\_secrets.properties\r\nps. By default all the \\*\\_secrets.properties files are ignored by git. \r\nTo change this behaviour please edit .gitignore file.\r\n\r\n## Video tutorials\r\nCheckout this yt [playlist](https://www.youtube.com/playlist?list=PLAUamg5VPF5HAxDQlDVItNLfTBNzhpnW4) \r\nwith videos explaining how to configure and use Gee.\r\n\r\n\r\n## How to configure it\r\nEdit the file jmeter-ec2.properties and follow instruction inside that file.\r\n\r\nYou can also create also a custom cfg file i.e. per specific environment and use\r\nit by passing \"cfg\" parameter to the jmeter-ec2.sh. This can be handy when running\r\ntests on local machines and non on EC2\r\n\r\n```bash\r\n    project=\"drKingShultz\" cfg=\"your_custom_cfg_file.properties\" ./jmeter-ec2.sh\r\n```\r\n\r\n## How to set up your jmeter (jmx) project\r\nBefore you start adding your own projects, please refer to an example ones \r\nalready present in the projects folder.\r\n\r\nNow, in next few steps I'll try to explain how I configure my projects.\r\n\r\n__Step 1:__\r\nFirst of all I highly recommend using `Utlimate Thread Group` plugin as the thread manager.\r\nThis plugin gives you precise control over the generated traffic.\r\n\r\n\r\n__Step 2:__\r\nOnce you've added such a thread to your project, then to produce all the nice graphs,\r\nadd four listeners to your project:\r\n* two to the thread group\r\n    * jp@gc LatenciesOverTime\r\n    * Generate Summary Results\r\n* and two outside of the thread group\r\n    * 2 PerfMon Collector listeners (local & remote)\r\n\r\n__Step 3:__\r\nHaving all listeners in place, the next step is to configure them.\r\n* Generate Summary Results \r\n    * fortunately it doesn't require any configuration, but please leave its name unchanged :)\r\n* jp@gc LatenciesOverTime\r\n    * should write it's results down to a \"~/result.jtl\" file.\r\n* 2 PerfMon Collector listeners (local & remote)\r\n    * Remote one should write results in: ~/PerfMon-remote.jtl\r\n    * and Local one should write down to: ~/PerfMon-local.jtl\r\n* jp@gc LatenciesOverTime and PerfMon Collectors \r\n    * should be configured just like this:\r\n    * ![alt text](./resources/SampleResultSaveConfiguration.png \"Sample Result Save Configuration\")\r\n\r\nbtw. Listener's \"Configure\" button is here :\r\n![alt text](./resources/Listener-configuration.png \"Listener Configure button\")\r\n\r\n__Step 4:__\r\nIn `projects` directory create a folder with the same name as the project file.\r\nThen put your jmx in there.\r\nHere's an example project folder structure:\r\n\r\n    ./jmeter-ec2\r\n        |\r\n        \\projects\r\n            |\r\n            \\drKingShultz\r\n                |\r\n                \\drKingShultz.jmx\r\n\r\n\r\n### Why do we need those listeners:\r\n__Generate Summary Results__ is used to show status updates while running your tests.  \r\n__jp@gc Latencies Over Time__ result file is used to generate most of the graphs.  \r\n__PerfMon Collector listeners__, will collect stat data from the:\r\n* machines you're running your test against  \r\n* and from the EC2 machines running your jmeter tests\r\n\r\nTo collect data from both sources we're using [server-agent](http://code.google.com/p/jmeter-plugins/wiki/PerfMonAgent).\r\nRead the short manual how to run the server agent on the remote machines.\r\n\r\n\r\n# How to run your project\r\nGee/JMeter-ec2 can be executed locally on you computer or using a CI system like Jenkins.\r\nAt the moment this script works well on tested on Linux Mint 13,14,15, Ubuntu 12.04, RedHat 5. \r\n\r\n## How to run it locally\r\nOnce you have everything in place, simply run:\r\n\r\n```bash\r\n    project=\"drKingShultz\" count=\"2\" ./jmeter-ec2.sh\r\n```\r\n\r\n\"count\" stands for the number of EC2 instances to be launched\r\n\r\nTo get a bit more verbose output, enable DEBUG mode :\r\n```bash\r\n    DEBUG=true project=\"drKingShultz\" count=\"2\" ./jmeter-ec2.sh\r\n```\r\n\r\n## How to run it locally using a comma-delimeted list of hosts\r\nAll the hosts used as load generators need to have a passwordless SSH access configured.\r\n[Here's](http://www.debian-administration.org/articles/152) a nice article how this can be done on Debian based OSes.\r\n\r\nOnce SSH access is configured, then create a copy of an `example-local-config.properties` file and adjust it to your needs.\r\nThe most important thing is to provide the list of the IPs/Hostnames you're going to use as generators and a pem key filename.\r\nThis pem file is your private key, generated when configuring passwordless SSH access.\r\n\r\nThen run the project providing the \"cfg\" parameter.\r\n\r\n```bash\r\n   project=\"drKingShultz\" cfg=\"path/to/your/custom/local-config-file.properties\" ./jmeter-ec2.sh \r\n```\r\n\r\nps. You don't have to provide the \"count\" parameter, as it will be automatically set to the number of hosts provided in the config file.\r\n\r\n\r\n## Running locally with Vagrant\r\n[Vagrant](http://vagrantup.com) allows you to test your jmeter-ec2 scripts locally before pushing them to ec2.\r\n\r\n### Pre-requisits\r\n* [Vagrant](http://vagrantup.com)\r\n* [VirtualBox](https://www.virtualbox.org/)\r\n\r\n### Usage:\r\nUse `jmeter-ec2.properties.vagrant` as a template for local provisioning. This file is setup to use Vagrants ssh key, ports, etc.\r\n```bash\r\n# start vm and provision defaultjre\r\nvagrant up\r\n# run your project\r\nproject=\"drKingShultz\" cfg=jmeter-ec2.properties.vagrant ./jmeter-ec2.sh\r\n# or for a more verbose output run it with DEBUG=true\r\nDEBUG=true project=\"drKingShultz\" cfg=jmeter-ec2.properties.vagrant ./jmeter-ec2.sh\r\n```\r\n\r\n### Note\r\n* You may need to edit the `Vagrantfile` to meet any specific networking needs. See Vagrant's [networking documentation](http://docs.vagrantup.com/v2/getting-started/networking.html) for details\r\n\r\n\r\n\r\n## How to run it on Jenkins\r\nCreate a new job:\r\n\r\nMark 'This build is parameterized' as enabled.\r\nThen:\r\n* add 'File parameter' and set 'File location' to 'test/jmeter-ec2/ec2/jmeter-ec2.pem'\r\n* add 'Password Parameter' named 'AWS\\_ACCESS\\_KEY' with no default value\r\n* add 'Password Parameter' named 'AWS\\_SECRET\\_KEY' with no default value\r\n* add 'String parameter' name 'JAVA\\_HOME' with default value poitning at the JAVA dir on the Jenkins\r\n\r\nin the \"Build\" section add \"Execute shell\" and paste the code below:\r\n```bash\r\n    # change permission for keys\r\n    if [ -e ec2/jmeter-ec2.pem ]; then\r\n        chmod 400 ec2/jmeter-ec2.pem\r\n    fi;\r\n\r\n    # run the tests\r\n    project=\"drKingShultz\" count=\"2\" ./jmeter-ec2.sh\r\n\r\n    # remove the unnecessary pem file\r\n    # will prevent errors when trying to overide pem file on a new build \r\n    if [ -e ec2/jmeter-ec2.pem ]; then\r\n        rm ec2/jmeter-ec2.pem\r\n    fi;\r\n```\r\n\r\nTo analyze result files and create a simple performance report:\r\nAdd a \"Publish performance test result report\" post-build action.\r\nThen point at the $WORKSPACE/projects/drKingShultz/results/jenkins.jtl file\r\nAdd desired performance thresholds to decide when tests should pass or fail.\r\n\r\n\r\n## Reports\r\nOnce test is finished, you can find a simple HTML report in the:\r\n\r\n    jmeter-ec2\r\n        |\r\n        \\drKingShultz\r\n            |\r\n            \\results\r\n\r\nReport file name is configurable. By default script will use:\r\n`${DATETIME}-report.html` where ${DATETIME} is the current datetime taken on script start.\r\nDatetime pattern is `%Y-%m-%d_-_%H-%M` so an example report filename will be:\r\n* ie: 2013-06-13_-_09-56-report.html \r\n\r\n\r\nbtw. If you plan to run this script on Jenkins, then it's worth setting the \r\nreport name (cfg variable name is: cfgHtmlReportFilename) to something like index.html\r\nThen it's easy to point at a fixed filename when using plugins like [HTML Publisher plugin](https://wiki.jenkins-ci.org/display/JENKINS/HTML+Publisher+Plugin)\r\n\r\n\r\n## Handy Jenkins Plugins\r\nA list of Jenkins plugins I found quite handy when working with it.\r\n* [ANSIColor](https://wiki.jenkins-ci.org/display/JENKINS/AnsiColor+Plugin) for coloring console log :)\r\n* [Plot Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Plot+Plugin) can be used to plot performance trends from a CSV,XML,Properties files. I only use it with the aggregate CSV result files that are generated by the Gee/JMeter-EC2 script.\r\n* [HTML Publisher Plugin](https://wiki.jenkins-ci.org/display/JENKINS/HTML+Publisher+Plugin) will publish HTML reports generated by Gee/JMeter-EC2 script\r\n* [Locks and Latches plugin](https://wiki.jenkins-ci.org/display/JENKINS/Locks+and+Latches+plugin) prevents builds from running simultanously on the same load generators\r\n* [Performance Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Performance+Plugin) will generate a performance trend from a JMeter XML result files. Can be a real overkill to your Jenkins instance when these XML files are big!!!!\r\n* [Site Monitor](https://wiki.jenkins-ci.org/display/JENKINS/SiteMonitor+Plugin) I'm using it to check it tested environment is up and running.\r\n\r\n\r\n## Test run outputs\r\nEverytime you run your tests, Gee produces few files that can:\r\n* help you analyze the test run results \r\n* be used to visualize the performance trend of your application\r\n\r\nWhat can be generated:\r\n* a HTML report with multiple PNG graphs. Here's an [example HTML report](http://htmlpreview.github.io/?https://github.com/kowalcj0/gee/blob/master/docs/examples/results/index.html) [flag name: cfgCreateHTMLReport]\r\n* an Aggregate CSV Report file [example file](./docs/examples/results/aggregate.csv) [flag name: cfgCreateAggregateCSVReport]\r\n* an Aggregate Response Time Percentiles CSV file (for all the samplers) [example file](./docs/examples/results/aggregatedResponseTimesPercentiles.csv) [flag name: cfgCreateAggregateCSVReport]\r\n* an Aggregate Response Time Percentiles CSV file (for each sampler)  [example file no. 1](./docs/examples/results/GetRespTimesPercentiles.csv) & [example file no. 2](./docs/examples/results/GetwithrandomfailureRespTimesPercentiles.csv) [flag name: cfgCreateAggregateCSVReport]\r\n* a CSV with few simple stats like: min, max, mean, median, stdev calculated for: Latency, Response time, Response Size [example file](./docs/examples/results/statistics.csv) [flag name: cfgCalculateSimpleStatsFromAResultFile]\r\n* a text file with a list of all URLs that: returned with an unexpected response code, didn't pass the assertion step etc. Check out all the *.errors files in an [example results archive](./docs/examples/results/results.tar.bz2) [flag name: cfgExctractFaultyURLs]\r\n* a XML file composed from all jenkins.xml files downloaded from all the nodes. It can be used by ie.: [Jenkins Performance Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Performance+Plugin) [flag name: cfgCreateMergedFileForJenkinsPerfPlugin]\r\n* a CSV file composed from all result.xml files downloaded from all the nodes. It can be used by ie.: [Jenkins Plot Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Plot+Plugin) [flag name: cfgCreateMergedResultFile]\r\n* a compressed archive (zip or bzip2) containing all the test run logs, error files, result files etc. [Example results archive](./docs/examples/results/results.tar.bz2) [flag name: cfgSaveCompressedResults]\r\n\r\nAll these files can generated once enabled in your configuration file.\r\nBtw. by default most of them are already enabled :)\r\nHere's a list of all configuration flags, that control what is produced \r\nduring a test run:\r\n* cfgCreateHTMLReport\r\n* cfgCreateAggregateCSVReport\r\n* cfgGenerateAggregatedResponseTimePercentilesReports\r\n* cfgCalculateSimpleStatsFromAResultFile\r\n* cfgExctractFaultyURLs\r\n* cfgSaveCompressedResults\r\n* cfgCreateMergedFileForJenkinsPerfPlugin\r\n* cfgCreateMergedResultFile\r\n\r\n## How to generate graphs from long test runs\r\n\r\nBy default jmeter-ec2 script will generate graphs using 1920x1200px resolution.\r\nIn case you need to create a report from a very long test, and you want to change the default graph resolution, \r\nthen you can use `analyzeZippedResults.sh` script for this purpose.\r\n\r\nHere's an example usage:\r\n```bash\r\n    FILES=\"path/to/a/folder/with/result/files/file_name_pattern_with_an_asterisk-*.zip\" WIDTH=20000 HEIGHT=1080 ./analyzeZippedResults.sh\r\n```\r\n\r\nWhere:\r\n* FILES -  [MANDATORY] A path to zipped result files. User can use an asterisk to process multiple files (i.e.: from multiple nodes). Just like you'd use 'ls' command to list all the files you want to process.\r\n* WIDTH -  [OPTIONAL] sets the width of the generated graphs, default is 1920\r\n* HEIGHT - [OPTIONAL] sets the height of the generated graphs, defaul is 1200\r\n* JMETER - [OPTIONAL] is the path to jmeter folder with JMeterPlugins installed\r\n* TARGET - [OPTIONAL] parameter that defines where output report with graphs will be stored. If not provided then \"./target\" will be used\r\n* DEBUG -  [OPTIONAL] parameter that enables more verbose output, use DEBUG=true\r\n\r\n\r\n\r\n## License:\r\nGee / JMeter-ec2 is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\r\n\r\nGee / JMeter-ec2 is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\r\n\r\nYou should have received a copy of the GNU General Public License along with Gee / JMeter-ec2. If not, see http://www.gnu.org/licenses/.\r\n\r\n## Original Jenkins-ec2 description:\r\n----------------------------\r\n\r\nIs available @ [jmeter-ec2](https://github.com/oliverlloyd/jmeter-ec2) page.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}